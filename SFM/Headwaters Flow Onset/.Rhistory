hobos.temp <- HOBO.getFromRaw(plots=c(1301:1350), sensorType="AirTemp", location="C:/GitHub/PepperwoodVegPlots/HOBO")
hobos.temp <- HOBO.getFromRaw(plots=c(1301:1350), sensorType="AirTemp", location="gitgub")
hobos.temp <- HOBO.getFromRaw(plots=c(1301:1350), sensorType="AirTemp", location=location)
head(hobos.temp)
head(hobos.temp)
#repair timestamps
hobos.temp <- HOBO.repairTimestamps(hobos.temp)
str(hobos.temp)
unique(sensor_data$flags)
unique($sensor_data$flags)
unique(hobos.temp$sensor_data$flags)
#flag data based on tests
hobos.temp <- HOBO.flagData(hobos.temp, c("VB","VE","P4","S"))
unique(hobos.temp$sensor_data$flags)
#explore structure and flags
str(hobos.temp)
#take a look at the flags applied
unique(hobos.temp$sensor_data$flags)
#____Step 1______flag the data
#flag temperature data based on tests listed in flag_definitions table
hobos.temp <- HOBO.flagData(hobos.temp, c("VB","VE","P4","S"))
#take a look at the flags applied
unique(hobos.temp$sensor_data$flags)
#RH
hobos.rh <- HOBO.getFromRaw(plots=c(1301:1350), sensorType = "RH", location=location)
#take a look at the flags applied
unique(hobos.temp$sensor_data$flags)
#take a look at the flags applied
unique(hobos.temp$sensor_data$flags)
unique(hobos.temp$sensor_data$flags)
#read in and format time column
ibuttons <- read.csv("C:/Users/cdodge/Desktop/GIT/W/SFM/Headwaters Flow Onset/ibutton_pipe_temperature_observations.csv")
str(ibuttons)
ibuttons$TS <- as.POSIXct(ibuttons$Date.Time,format="%m/%d/%Y %H:%M")
#Quality check on data
max(ibuttons$Value)
min(ibuttons$value)
?min()
min(ibuttons$Value)
min(ibuttons$Value)
str(ibuttons)
wideform <- dcast(ibuttons, TS ~ Sensor, value.var = "Value")
library(reshape2)
wideform <- dcast(ibuttons, TS ~ Sensor, value.var = "Value")
View(wideform)
ibuttons[ , !(names(ibuttons)== "unit")]
ib <- ibuttons[ , !(names(ibuttons)== "unit")]
ib <- ibuttons[ , !(names(ibuttons)== "Unit")]
wideform <- dcast(ib, TS ~ Sensor, value.var = "Value")
str(ibuttons)
View(ibuttons)
View(ibuttons)
str(ibuttons)
#drop column for to avoid aggregation in reshape
drops <- c("Unit","Date.Time")
ibuttons[ , !(names(ibuttons) %in% drops)]
ib <- ibuttons[ , !(names(ibuttons) %in% drops)]
wideform <- dcast(ib, TS ~ Sensor, value.var = "Value")
wideform <- dcast(ib, TS ~ Sensor, value.var = "Value")
ib_nodups <- unique(ib[,1:3])
wideform <- dcast(ib_nodups, TS ~ Sensor, value.var = "Value")
duplicates <- ib[duplicated(ib)]
duplicates <- ib[duplicated(ib),]
View(duplicates)
#remove dulicates
ib_nodups <- df[!duplicated(df),]
#remove dulicates
ib_nodups <- ib[!duplicated(ib),]
wideform <- dcast(ib_nodups, TS ~ Sensor, value.var = "Value")
head(wideform)
wideform <- dcast(ib_nodups, TS ~ Sensor, fill = NA, value.var = "Value")
wideform <- dcast(ib_nodups, TS ~ Sensor, fill = -999, value.var = "Value")
duplicates <- ib_nodups[duplicated(ib_nodups),]
head(ib_nodups)
wideform <- dcast(ib_nodups, TS ~ Sensor, value.var = "Value")
max(wideform$MC1H)
max(wideform$MC1Hb)
max(wideform$MC1L)
max(wideform$MC1Lb)
max(wideform$RC1H)
max(wideform$RC1L)
max(wideform$WC1H)
max(wideform$WC1L)
head(wideform)
wideform_probs <- wideform[which(wideform[,1]==2 | wideform[,6]==2 | wideform[0,7]==2)]
wideform_probs <- wideform[wideform[,1]==2 | wideform[,6]==2 | wideform[0,7]==2]
wideform_probs <- wideform[wideform[,1]==2]
wideform_probs <- wideform[wideform[,1]==2]
wideform_probs <- wideform[wideform[1,]==2]
str(wideform)
wideform_probs <- wideform[wideform[,2]==2]
wideform_probs <- wideform[wideform[,2]==2]
wideform_probs <- wideform[which(wideform[,2]==2)]
wideform_probs <- wideform[which(wideform[,2]==2)]
wideform_probs <- wideform[which(wideform[,1]==2)]
wideform_probs <- wideform[which(wideform[,2]==2)]
wideform_probs <- wideform[which(wideform[,6]==2)]
str(wideform)
test <- wideform[rownames(wideform) %like% "2", ]
library(data.table)
install.packages('data.table')
library(data.table)
test <- wideform[rownames(wideform) %like% "2", ]
test <- wideform[rownames(wideform) == "2", ]
View(test)
View(test)
test2 <- wideform[wideform$MC1H == 2]
str(wideform)
test2 <- wideform[wideform$MC1H == 2,]
View(test2)
wideform <- dcast(ib_nodups, TS ~ Sensor, value.var = "Value")
test2 <- wideform[wideform$MC1H == 2,]
View(test2)
test2r <- wideform[wideform$RC1H == 2,]
View(test2r)
View(test2r)
test2r <- wideform[wideform$RC1L == 2,]
View(test2)
View(test2r)
View(test2r)
test2rl <- wideform[wideform$RC1L == 2,]
View(test2rl)
test2r <- wideform[wideform$RC1H == 2,]
View(test2r)
test2 <- wideform[wideform$MC1H == 2,]
View(test2)
bad_TS <- c("2017-11-05 01:29:00","2016-08-26 18:00:00", "2016-11-06 01:00:00")
View(test2)
View(test2)
View(test2r)
View(test2r)
View(test2)
View(test2)
View(test2rl)
View(test2rl)
bad_TS <- c("2017-11-05 01:29:00","2016-08-26 18:00:00", "2016-11-06 01:00:00", "2017-11-05 01:30:00")
View(ib_nodups)
no.bad.rows <- ib_nodups[ibnodups$TS %in% bad_TS]
no.bad.rows <- ib_nodups[!ib_nodups$TS %in% bad_TS]
no.bad.rows <- ib_nodups[ib_nodups$TS %in% bad_TS]
bad.rows <- ib_nodups[ib_nodups$TS %in% bad_TS]
View(bad.rows)
bad.rows <- ib_nodups[ib_nodups$TS %in% bad_TS,]
View(bad.rows)
View(ib_nodups)
#remove dulicate rows for individual sensors
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H),]
MC1H_noDups <- MC1H[,duplicated(TS)]
MC1H_noDups <- MC1H[!duplicated(MCH1$TS),]
#remove dulicate rows for individual sensors
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H$TS),]
MC1H_Dups <- MC1H[duplicated(MC1H$TS),]
View(MC1H_Dups)
RC1H <- ib_nodups[ib_nodups$Sensor =="RC1H",]
#remove dulicate rows for individual sensors
#this subsets data by sensor and removes a row with duplicate TS column of subset
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H$TS),]
MC1H_noDups <- MC1H[duplicated(MC1H$TS),]
RC1H <- ib_nodups[ib_nodups$Sensor =="RC1H",]
RC1H_noDups <- RC1H[!duplicated(RC1H$TS),]
RC1H_noDups <- RC1H[duplicated(RC1H$TS),]
RC1L <- ib_nodups[ib_nodups$Sensor =="RC1L",]
RC1L_noDups <- RC1L[!duplicated(RC1L$TS),]
RC1L_noDups <- RC1L[duplicated(RC1L$TS),]
View(MC1H_Dups)
#remove dulicate rows for individual sensors
#this subsets data by sensor and removes a row with duplicate TS column of subset
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H$TS),]
MC1H_Dups <- MC1H[duplicated(MC1H$TS),]
RC1H <- ib_nodups[ib_nodups$Sensor =="RC1H",]
RC1H_noDups <- RC1H[!duplicated(RC1H$TS),]
RC1H_Dups <- RC1H[duplicated(RC1H$TS),]
RC1L <- ib_nodups[ib_nodups$Sensor =="RC1L",]
RC1L_noDups <- RC1L[!duplicated(RC1L$TS),]
RC1L_Dups <- RC1L[duplicated(RC1L$TS),]
View(MC1H_Dups)
View(RC1H_Dups)
#remove dulicate rows for individual sensors
#this subsets data by sensor and removes a row with duplicate TS column of subset
sort(ib_nodups$Value)
#remove dulicate rows for individual sensors
#this subsets data by sensor and removes a row with duplicate TS column of subset
ibnodups <- sort(ib_nodups$Value)
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H$TS),]
MC1H_Dups <- MC1H[duplicated(MC1H$TS),]
RC1H <- ib_nodups[ib_nodups$Sensor =="RC1H",]
RC1H_noDups <- RC1H[!duplicated(RC1H$TS),]
RC1H_Dups <- RC1H[duplicated(RC1H$TS),]
RC1L <- ib_nodups[ib_nodups$Sensor =="RC1L",]
RC1L_noDups <- RC1L[!duplicated(RC1L$TS),]
RC1L_Dups <- RC1L[duplicated(RC1L$TS),]
#remove dulicate rows for individual sensors
#this subsets data by sensor and removes a row with duplicate TS column of subset
ibnodups <- sort(ib_nodups$Value, decreasing = TRUE)
C
MC1H <- ib_nodups[ib_nodups$Sensor =="MC1H",]
MC1H_noDups <- MC1H[!duplicated(MC1H$TS),]
MC1H_Dups2 <- MC1H[duplicated(MC1H$TS),]
RC1H <- ib_nodups[ib_nodups$Sensor =="RC1H",]
RC1H_noDups <- RC1H[!duplicated(RC1H$TS),]
RC1H_Dups2 <- RC1H[duplicated(RC1H$TS),]
RC1L <- ib_nodups[ib_nodups$Sensor =="RC1L",]
RC1L_noDups <- RC1L[!duplicated(RC1L$TS),]
RC1L_Dups2 <- RC1L[duplicated(RC1L$TS),]
View(RC1H_Dups)
View(RC1H_Dups2)
View(MC1H_Dups)
View(MC1H_Dups2)
View(RC1L_Dups)
View(RC1L_Dups2)
ibnodups2 <- do.call("rbind", list(RC1L_noDups, RC1H_noDups, MC1H_noDups))
bad_TS <- c("2017-11-05 01:29:00","2016-08-26 18:00:00", "2016-11-06 01:00:00", "2017-11-05 01:30:00")
wideform <- dcast(ibnodups2, TS ~ Sensor, value.var = "Value")
head(ib_nodups)
#now compare co-located sensors
head(wieform)
#now compare co-located sensors
head(wideform)
head(ib_nodups)
unique(ib$Sensor)
remaining_sensors <- c("MC1L", "WC1L", "WC1H", "MC1Hb", "MC1Lb")
rs_data <- ibnodups[ibnodups$Sensor %in% remaining_sensors]
rs_data <- ibnodups[ibnodups$Sensor %in% remaining_sensors,]
rs_data <- ib_nodups[ib_nodups$Sensor %in% remaining_sensors,]
ib_nodups3 <- do.call("rbind", list(RC1L_noDups, RC1H_noDups, MC1H_noDups, rs_data))
#now compare co-located sensors
head(wideform)
#now compare co-located sensors
head(wideform)
wideform <- dcast(ib_nodups3, TS ~ Sensor, value.var = "Value")
#now compare co-located sensors
head(wideform)
View(wideform)
install.packages("Lubridate")
install.packages("lubridate")
library(lubridate)
?round_date()
ib_nodups$RTS <- round_date(ib_nodups3$TS, unit = "30 minutes")
ib_nodups3$RTS <- round_date(ib_nodups3$TS, unit = "30 minutes")
head(ib_nodups3)
#remove TS columns
ib_nodups3_rounded <- ib_nodups3
ib_nodups3_rounded(head)
head(ib_nodups3_rounded)
#remove TS columns
ib_nodups3_rounded <- ib_nodups3[,-3]
head(ib_nodups3_rounded)
unique(ib_nodups3_rounded$RTS)
grep("30:00", ib_nodups3_rounded)
ib_nodups3$RTS <- round_date(ib_nodups3$TS, unit = "15 minutes")
head(ib_nodups3)
#remove TS columns
ib_nodups3_rounded <- ib_nodups3[,-3]
head(ib_nodups3_rounded)
unique(ib_nodups3_rounded$RTS)
grep("30:00", ib_nodups3_rounded)
head(ib_nodups3)
View(ib_nodups3)
View(ib_nodups3_rounded)
grep("30:00", ib_nodups3_rounded)
view(wideform2)
View(wideform2)
wideform2 <- dcast(ib_nodups3_rounded, TS ~Sensor, value.var = "Value")
head(ib_nodups3_rounded)
wideform2 <- dcast(ib_nodups3_rounded, RTS ~ Sensor, value.var = "Value")
write.csv(wideform2, file = "roundedTS.csv")
getwd()
#round time to nearest half hour by using the 30 minute unit to round to nearest half hour
ib_nodups3$RTS <- round_date(ib_nodups3$TS, unit = "30 minutes")
#remove TS columns
ib_nodups3_rounded <- ib_nodups3[,-3]
head(ib_nodups3_rounded)
wideform2 <- dcast(ib_nodups3_rounded, RTS ~ Sensor, value.var = "Value")
write.csv(wideform2, file = "roundedTS.csv")
setwd("C:/Users/cdodge/Desktop/GIT/W/SFM/Headwaters Flow Onset")
write.csv(ib_nodups3_rounded, file = "roundedTS_long.csv")
write.csv(ib_nodups3, file = "nodups_long.csv")
#need to add aggregation statistic because of duplicate time x site x sensor values after rounding
wideform2 <- dcast(ib_nodups3_rounded,fun.aggregate = "mean" RTS ~ Sensor, value.var = "Value")
#need to add aggregation statistic because of duplicate time x site x sensor values after rounding
wideform2 <- dcast(ib_nodups3_rounded,fun.aggregate = "mean", RTS ~ Sensor, value.var = "Value")
#need to add aggregation statistic because of duplicate time x site x sensor values after rounding
wideform2 <- dcast(ib_nodups3_rounded, fun.aggregate = "mean", RTS ~ Sensor, value.var = "Value")
#need to add aggregation statistic because of duplicate time x site x sensor values after rounding
wideform2 <- dcast(ib_nodups3_rounded, fun.aggregate = mean, RTS ~ Sensor, value.var = "Value")
#now compare co-located sensors
unique(wideform2$MC1H)
MC1H_compare <- wideform2[wideform2$MC1H!="NaN" & wideform2$MC1Hb !="NaN"]
head(MC1H_compare)
MC1H_compare <- wideform2[wideform2$MC1H!="NaN" & wideform2$MC1Hb!="NaN",]
head(MC1H_compare)
MC1H_compare <- wideform2[wideform2$MC1H!="NaN",]
head(MC1H_compare)
unique(MC1Hb)
unique(MC1H_compare$MC1Hb)
MC1H_compare$diff <-
unique(wideform2$MC1L)
MC1L_compare <- wideform2[wideform2$MC1L!="NaN" & wideform2$MC1Lb!="NaN",]
MC1L_compare <- wideform2[wideform2$MC1L!="NaN",]
head(MC1L_compare)
unique(MC1L_compare$MC1Lb)
MC1L_compare <- wideform2[wideform2$MC1L!="NaN" & wideform2$MC1Lb!="NaN",]
head(MC1L_compare)
View(wideform2)
rm(list=ls())
##___STEP 1_____read in data and format time column, examine data
ibuttons <- read.csv("C:/Users/cdodge/Desktop/GIT/W/SFM/Headwaters Flow Onset/ibutton_pipe_temperature_observations.csv")
str(ibuttons)
ibuttons$TS <- as.POSIXct(ibuttons$Date.Time,format="%m/%d/%Y %H:%M")
str(ibuttons)
#Check on overall temperature value range (it is -3.94 to 67.4)
max(ibuttons$Value)
min(ibuttons$Value)
#___STEP 2_____prep data to compare sensors that are co-located (changing to wide format is the goal)
library(reshape2)
#We will use reshape, but to avoid aggregation, drop extra columns and duplicate rows
drops <- c("Unit","Date.Time")
ib <- ibuttons[ , !(names(ibuttons) %in% drops)]
#are there duplicate rows, yes there are 6. remove dulicate rows
duplicates <- ib[duplicated(ib),]
ib_nodups <- ib[!duplicated(ib),]
View(duplicates)
View(duplicates)
View(duplicates)
view(duplicates)
View(duplicates,)
sensors_w_duplicates <- unique(duplicates$Sensor)
for (Sensor in sensors_w_duplicates) {
Sensor <- ib_nodups[ib_nodups$Sensor == Sensor ,]
}
for (Sensor in sensors_w_duplicates) {
paste(Sensor) <- ib_nodups[ib_nodups$Sensor == Sensor,]
}
MC1Hb <- ib_nodups[ib_nodups$Sensor =="MC1Hb",]
MC1Hb_noDups <- MC1Hb[!duplicated(MC1Hb$TS),]
View(MC1Hb)
View(MC1Hb_noDups)
#remove dulicate rows for individual sensors
#look at rows of duplicates to get sensors with duplicates
View(duplicates,)
sensors_w_duplicates <- unique(duplicates$Sensor)
View(MC1Hb)
test <- split(ib_nodups, sensors_w_duplicates)
split_nodups <- split(ib_nodups, sensors_w_duplicates)
View(split_nodups)
#remove dulicate rows for individual sensors
#look at rows of duplicates to get sensors with duplicates
View(duplicates,)
sensors_w_duplicates <- unique(duplicates$Sensor)
View(sensors_w_duplicates)
split_nodups <- split(ib_nodups, sensors_w_duplicates)
rm(list=ls())
##___STEP 1_____read in data and format time column, examine data
ibuttons <- read.csv("C:/Users/cdodge/Desktop/GIT/W/SFM/Headwaters Flow Onset/ibutton_pipe_temperature_observations.csv")
str(ibuttons)
ibuttons$TS <- as.POSIXct(ibuttons$Date.Time,format="%m/%d/%Y %H:%M")
#Check on overall temperature value range (it is -3.94 to 67.4)
max(ibuttons$Value)
min(ibuttons$Value)
#___STEP 2_____prep data to compare sensors that are co-located (changing to wide format is the goal)
#We will use reshape, but to avoid aggregation, drop extra columns and duplicate rows
drops <- c("Unit","Date.Time")
ib <- ibuttons[ , !(names(ibuttons) %in% drops)]
#are there duplicate rows, yes there are 7. remove dulicate rows
duplicates <- ib[duplicated(ib),]
View(duplicates,)
ib_nodups <- ib[!duplicated(ib),]
#uh oh there will be lots of blanks in wide foramt because the clocks were set at differing times
library(lubridate)
#round time to nearest half hour by using the 30 minute unit to round to nearest half hour
#this re introduces duplicates, because some ibuttons were set to record every 15 min (i.e. 9:26 and 9:41 are both rounded to 9:30)
ib_nodups$RTS <- round_date(ib_nodups$TS, unit = "30 minutes")
head(ib_nodups)
#remove TS columns
ib_nodups_rounded <- ib_nodups[,-3]
head(ib_nodups_rounded)
#Load library to create wideform data
#need to add aggregation statistic because there are duplicate time x site x sensor values after rounding
library(reshape2)
wideform <- dcast(ib_nodups_rounded, fun.aggregate = mean, RTS ~ Sensor, value.var = "Value")
#now compare co-located sensors
unique(wideform2$MC1H)
#Appears that there are no observations and main and b sensor at the same time?
OlsonNames()
#now compare co-located sensors
unique(wideform2$MC1H)
#now compare co-located sensors
unique(wideform$MC1H)
MC1H_compare <- wideform[wideform$MC1H!="NaN" & wideform$MC1Hb!="NaN",]
head(MC1H_compare)
MC1H_compare[MC1H_compare[,c(1,2,3)]]
MC1H_compare<- [MC1H_compare[,c(1,2,3)]
MC1H_compare<- MC1H_compare[,c(1,2,3)]
head(MC1H_compare)
MC1H_compare$diff <- abs(wideform$MC1H - wideform$MC1Hb)
MC1H_compare$diff <- abs(MC1H_compare$MC1H - MC1H_compare$MC1Hb)
head(MC1H_compare)
sort(MC1H_compare$diff)
MCH1_compare <- sort(MC1H_compare$diff)
head(MC1H_compare)
?sort()
MCH1_compare <- MCH1_compare[order(diff)]
MCH1_compare <- MCH1_compare[order(MCH1_compare$diff)]
test2 <- MCH1_compare[order(MCH1_compare$diff)]
head(MC1H_compare)
MCH1_compare <- MCH1_compare[order(MCH1_compare$diff),]
MCH1_compare <-
MCH1_compare[order(MCH1_compare$diff),]
MCH1_compare <-
MCH1_compare[order(diff),]
order(MCH1_comparediff)
order(MCH1_compare$diff)
#now compare co-located sensors
MC1H_compare <- wideform[wideform$MC1H!="NaN" & wideform$MC1Hb!="NaN",]
order(MCH1_compare$diff)
#now compare co-located sensors
MC1H_compare <- wideform[wideform$MC1H!="NaN" & wideform$MC1Hb!="NaN",]
View(MC1H_compare)
View(MC1H_compare)
MC1H_compare$diff <- abs(MC1H_compare$MC1H - MC1H_compare$MC1Hb)
order(MCH1_compare$diff)
MCH1_compare <-
#cannot sort because of atomic vector
View(MCH1_compare)
MCH1_compare <-
#cannot sort because of atomic vector
View(MCH1_compare)
View(MC1H_compare)
View(MC1H_compare)
View(MC1H_compare)
View(MC1H_compare)
MC1L_compare <- wideform[wideform$MC1L!="NaN" & wideform$MC1Lb!="NaN",]
MC1L_compare<- MC1L_compare[,c(1,2,3)]
MC1L_compare$diff <- abs(MC1L_compare$MC1L - MC1L_compare$MC1Lb)
MC1L_compare <- MC1L_compare[,c(1,2,3)]
MC1L_compare$diff <- abs(MC1L_compare$MC1L - MC1L_compare$MC1Lb)
#now compare co-located sensors MC1H/b and MC1L/b
MC1H_compare <- wideform[wideform$MC1H!="NaN" & wideform$MC1Hb!="NaN",]
MC1H_compare<- MC1H_compare[,c(1,2,3)]
MC1H_compare$diff <- abs(MC1H_compare$MC1H - MC1H_compare$MC1Hb)
MC1L_compare <- wideform[wideform$MC1L!="NaN" & wideform$MC1Lb!="NaN",]
MC1L_compare <- MC1L_compare[,c(1,2,3)]
MC1L_compare$diff <- abs(MC1L_compare$MC1L - MC1L_compare$MC1Lb)
wideform <- dcast(ib_nodups_rounded, fun.aggregate = mean, RTS ~ Sensor, value.var = "Value")
MC1L_compare <- wideform[wideform$MC1L!="NaN" & wideform$MC1Lb!="NaN",]
MC1L_compare <- MC1L_compare[,c(1,2,3)]
MC1L_compare$diff <- abs(MC1L_compare$MC1L - MC1L_compare$MC1Lb)
View(MC1L_compare)
View(MC1L_compare)
wideform <- dcast(ib_nodups_rounded, fun.aggregate = mean, RTS ~ Sensor, value.var = "Value")
View(wideform)
View(wideform)
MC1L_compare <- MC1L_compare[,c(1,4,5)]
MC1L_compare <- wideform[wideform$MC1L!="NaN" & wideform$MC1Lb!="NaN",]
MC1L_compare <- MC1L_compare[,c(1,4,5)]
MC1L_compare$diff <- abs(MC1L_compare$MC1L - MC1L_compare$MC1Lb)
View(MC1L_compare)
View(MC1L_compare)
View(MC1H_compare)
max(MC1H_compare)
max(MC1H_compare$diff)
print(max(MC1H_compare$diff))
print(max(MC1H_compare$diff &  MC1L_compare$diff))
print(max(MC1H_compare$diff) &  max(MC1L_compare$diff))
print(max(MC1H_compare$diff) & max(MC1L_compare$diff))
max(MC1H_compare$diff)
max(MC1L_compare$diff))
max(MC1L_compare$diff)
#Get daily max min
#create date column
ib_nodups_rounded$date <- day(ib_nodups_rounded$TS)
?day()
?date()
?day()
#Get daily max min
#create date column
as.POSIXlt(ib_nodups_rounded$TS)
View(ibuttons)
#Get daily max min
#create date column
as.POSIXlt(ibuttons$Date.Time)
#Get daily max min
#create date column
daily <- apply.daily(as.xts(ib_nodups), mean)
#Get daily max min
#create date column
install.packages('xts')
daily <- apply.daily(as.xts(ib_nodups), mean)
apply.daily(as.xts(ib_nodups), mean)
library(xts)
apply.daily(as.xts(ib_nodups), mean)
View(ib_nodups)
View(ib_nodups)
sum.dat <- ib_nodups[-4,]
ib_nodups <- ib[!duplicated(ib),]
#round time to nearest half hour by using the 30 minute unit to round to nearest half hour
#this re introduces duplicates, because some ibuttons were set to record every 15 min (i.e. 9:26 and 9:41 are both rounded to 9:30)
ib_nodups$RTS <- round_date(ib_nodups$TS, unit = "30 minutes")
View(ib_nodups)
View(ib_nodups)
sum.dat <- ib_nodups[,-4]
View(ib_nodups_rounded)
View(ib_nodups_rounded)
View(ib_nodups)
View(ib_nodups)
View(sum.dat)
apply.daily(as.xts(sum.dat), mean)
